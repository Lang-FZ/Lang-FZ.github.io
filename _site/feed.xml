<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LFZ 代码簿</title>
    <description>对抗健忘症的笔记簿</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>

    <pubDate>Fri, 16 Aug 2019 18:15:27 +0800</pubDate>
    <lastBuildDate>Fri, 16 Aug 2019 18:15:27 +0800</lastBuildDate>

    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>iOS Shell自动化打包</title>
        <description>&lt;hr /&gt;
&lt;h4 id=&quot;整理一下自己写的自动化打包脚本&quot;&gt;整理一下自己写的自动化打包脚本&lt;/h4&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;先把完整代码放出来&quot;&gt;&lt;strong&gt;先把完整代码放出来&lt;/strong&gt;&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;language-Shell&quot;&gt;#!/bin/bash
#  packg.sh

#获取命令后的参数 例如：ls -a 中的-a
while getopts &quot;dlua:&quot; opt; do
case $opt in
a) args=$OPTARG;;
?) echo unspport args; exit 1;;
esac
done

#进入项目文件夹  一定要注意！进错了可能把代码删了！
cd /Users/LFZ/**********
#钥匙串权限 -p 后面是你的本机密码 本地打包无所谓 Jenkins远程需要权限
security unlock-keychain -p ********* /Users/LFZ/Library/Keychains/login.keychain

#这些信息可以自己写个文件保存 直接取本地文件内的配置 方便测试产品同学修改信息
appName=&quot;*******&quot;           #app名字
targetName=&quot;******&quot;         #taget
local=&quot;NO&quot;                  #保存本地/上传蒲公英
buildUpdateDescription=&quot;&quot;   #git变动信息 提交给蒲公英的更新详情
pgyerUKey=&quot;***************************&quot;         # 这里替换蒲公英ukey
pgyerApiKey=&quot;***************************&quot;       # 这里替换蒲公英apiKey
emailSet=`cat $(pwd)/Profile/EmailSet/email.sh` # 包含需要发给的邮箱或邮箱组
PlistBuddy=&quot;/usr/libexec/PlistBuddy&quot;            # PlistBuddy是解析plist的工具


conf=Release
initPath=$(pwd)                                 # 初始文件夹路径
echo &quot;-------初始文件夹路径 -- $initPath&quot;

date=$(date +%Y%m%d%H%M)                        # 日期
echo &quot;-------开始时间 -- $date&quot;

ipaDir=&quot;Profile/Release/Distribution/${targetName}_${date}&quot; # ipa文件夹
echo &quot;-------ipa文件夹路径 -- $ipaDir&quot;

releaseDir=&quot;build/Build/Products/Release-iphoneos&quot;
plistFile=&quot;${initPath}/${appName}/Info.plist&quot;   # 查找info.plist文件
echo &quot;-------Info.plist File -- $plistFile&quot;


version=$($PlistBuddy -c &quot;Print :CFBundleShortVersionString&quot; $plistFile)    #获取工程版本号
echo &quot;-------version -- $version&quot;

buildNum=$($PlistBuddy -c &quot;Print :CFBundleVersion&quot; $plistFile)              #获取工程build号
echo &quot;-------buildNum -- $buildNum&quot;

ipa_prefix=${appName}_${version}_${buildNum}_${date}
ipaName=${ipa_prefix}.ipa
echo &quot;-------IPA文件名 -- $ipaName&quot;

ipaPath=&quot;${initPath}/${ipaDir}/${ipaName}&quot;
echo &quot;-------ipaPath -- $ipaPath&quot;
appFile=&quot;${initPath}/${releaseDir}/${targetName}.app&quot;
dSYMBackupPath=&quot;${HOME}/Documents/workspace/dSYM/${appName}/${ipa_prefix}&quot;  #dSYM文件本地缓存路径
echo &quot;-------dSYMBackupPath -- ${dSYMBackupPath}&quot;


#添加宏
args=${args:+GCC_PREPROCESSOR_DEFINITIONS=$args}


#清空文件夹里之前的文件
function cleanFolder() {

    #XcodeBuild清空设置
    xcodebuild clean -configuration $conf
    rm -rdf ${releaseDir%%/*} #删掉第一个，及其右边的字符串（清除build/中的所有文件夹）
    rm -rdf &quot;$ipaDir&quot;

    #新建目录
    mkdir -p $ipaDir

    ##更新AppIcon文件夹时间，否则包内图片不会被打包到Bundle
    find $initPath/.. -name &quot;AppIcon*&quot; -exec touch {} \;

    mkdir -p $dSYMBackupPath
}

#导入证书 开始打包
function archive() {

    #证书
    #security import ${initPath}/Profile/Develop_Ent/app.p12 -k ~/Library/Keychains/login.keychain -P &quot;***&quot; -T /usr/bin/codesign
    #SIGNING_IDENTITY=&quot;iPhone Distribution: *********** CompanyLtd. (***********)&quot;
    PROVISIONING_PROFILE=&quot;${initPath}/Profile/Develop_Ent/********.mobileprovision&quot;
    openssl smime -in ${PROVISIONING_PROFILE} -inform der -verify &amp;gt; provisionProfile || exit $?
    echo &quot;-------导入证书完成-------&quot;

    UUID=$(${PlistBuddy} -c &quot;print UUID&quot; provisionProfile)
    echo &quot;-------UUID -- $UUID&quot;

    lib_profile=&quot;${HOME}/Library/MobileDevice/Provisioning Profiles/${UUID}.mobileprovision&quot;
    echo &quot;-------lib_profile --- $lib_profile&quot;

    test ! -e &quot;${lib_profile}&quot; &amp;amp;&amp;amp; open ${PROVISIONING_PROFILE}
    Profile_UUID=&quot;PROVISIONING_PROFILE=${UUID}&quot;
    echo &quot;-------Profile_UUID -- $Profile_UUID&quot;

    rm provisionProfile

    xcodebuild -workspace $appName.xcworkspace -scheme ${targetName} -configuration $conf -derivedDataPath build -sdk iphoneos ${Profile_UUID} ${args} || exit $?

    xcrun -sdk iphoneos PackageApplication -v &quot;$appFile&quot; -o &quot;$ipaPath&quot;

    cp -r $appFile ${dSYMBackupPath}/${ipa_prefix}.app
    echo &quot;----ipa和dSYM本地文件已生成----&quot;
}


#得到距离上次git拉取 commit变化信息
function gitChangedInfo() {

    touch $(pwd)/Profile/changes.sh
    # 包含上一次git拉取的短提交名 也可以和上面的信息放在同一个文件里
    changes=`cat $(pwd)/Profile/changes.sh`

    if [ &quot;$changes&quot; == &quot;&quot; ]
    then
    buildUpdateDescription=`git log --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:&quot;%cd %cn %B&quot; --no-merges -1`
    else
    buildUpdateDescription=`git log $changes.. --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:&quot;%cd %cn %B&quot; --no-merges`
    fi

    echo &quot;-------git修改描述 -- $buildUpdateDescription&quot;
}

#上传蒲公英
function pgyer() {

    RESULT=$(curl -F &quot;file=@$ipaPath&quot; -F &quot;_api_key=$pgyerApiKey&quot; -F &quot;buildUpdateDescription=$buildUpdateDescription&quot; -F &quot;publishRange=2&quot; https://www.pgyer.com/apiv2/app/upload)

    echo `git log --pretty=format:&quot;%h&quot; --no-merges -1` &amp;gt; $(pwd)/Profile/changes.sh
    echo &quot;-------完成上传-------&quot;

    #蒲公英二维码
    httpstr=${RESULT#*buildQRCodeURL}
    httpstr=${httpstr#*:}
    httpstr=${httpstr#*&quot;}
    httpstr=${httpstr%&quot;*}
    QRCode=${httpstr//'\'/''}

    #发送邮件
    echo -e &quot;app&amp;amp;#x66F4;&amp;amp;#x65B0;:\n$QRCode\n\n$buildUpdateDescription&quot; | mail -s &quot;iOS&amp;amp;#x65B0;&amp;amp;#x5305;&quot; $emailSet

    echo &quot;QRCode:\n$QRCode&quot;
}


#正式调用方法
gitChangedInfo
cleanFolder
archive
pgyer


&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;几个小部分分析一下&quot;&gt;&lt;strong&gt;几个小部分分析一下&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&quot;方便查看提交信息app变化&quot;&gt;&lt;strong&gt;方便查看提交信息，App变化&lt;/strong&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-Shell&quot;&gt;#得到距离上次git拉取 commit变化信息
function gitChangedInfo() {

    touch $(pwd)/Profile/changes.sh
    # 包含上一次git拉取的短提交名 也可以和上面的信息放在同一个文件里
    changes=`cat $(pwd)/Profile/changes.sh`

    if [ &quot;$changes&quot; == &quot;&quot; ]
    then
    buildUpdateDescription=`git log --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:&quot;%cd %cn %B&quot; --no-merges -1`
    else
    buildUpdateDescription=`git log $changes.. --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:&quot;%cd %cn %B&quot; --no-merges`
    fi

    echo &quot;-------git修改描述 -- $buildUpdateDescription&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个功能是每次成功打包都记录当前git拉取到的那个提交短码标记，保存到本地，每次远程打包都纪律两次之间提交的详情，包括提交人，提交信息，提交时间。可以在蒲公英和邮件里看到变化信息。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;群发邮件-打包之后把新app蒲公英下载二维码发到指定邮件和邮件组&quot;&gt;&lt;strong&gt;群发邮件 打包之后把新App蒲公英下载二维码发到指定邮件和邮件组&lt;/strong&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-Shell&quot;&gt;
emailSet=`cat $(pwd)/Profile/EmailSet/email.sh` # 包含需要发给的邮箱或邮箱组

#上传蒲公英
function pgyer() {

    RESULT=$(curl -F &quot;file=@$ipaPath&quot; -F &quot;_api_key=$pgyerApiKey&quot; -F &quot;buildUpdateDescription=$buildUpdateDescription&quot; -F &quot;publishRange=2&quot; https://www.pgyer.com/apiv2/app/upload)

    echo `git log --pretty=format:&quot;%h&quot; --no-merges -1` &amp;gt; $(pwd)/Profile/changes.sh
    echo &quot;-------完成上传-------&quot;

    #蒲公英二维码
    httpstr=${RESULT#*buildQRCodeURL}
    httpstr=${httpstr#*:}
    httpstr=${httpstr#*&quot;}
    httpstr=${httpstr%&quot;*}
    QRCode=${httpstr//'\'/''}

    #发送邮件
    echo -e &quot;app&amp;amp;#x66F4;&amp;amp;#x65B0;:\n$QRCode\n\n$buildUpdateDescription&quot; | mail -s &quot;iOS&amp;amp;#x65B0;&amp;amp;#x5305;&quot; $emailSet

    echo &quot;QRCode:\n$QRCode&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;buildUpdateDescription 就是git短码比较出来的提交详情，emailSet 是在本地写的一份文件，这个是可以和其它信息整合到一分文件或者plist里面的，里面写了需要发给的邮箱或邮箱组。&lt;/p&gt;

&lt;h4 id=&quot;和权限相关的部分本地权限是一部分jenkins远程打包是另一部分&quot;&gt;&lt;strong&gt;和权限相关的部分，本地权限是一部分，Jenkins远程打包是另一部分&lt;/strong&gt;&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-Shell&quot;&gt;#钥匙串权限 -p 后面是你的本机密码
security unlock-keychain -p ********* /Users/LFZ/Library/Keychains/login.keychain
#证书 因为我这里用的是Adhoc的描述文件 -P 后面是p12的密码 Distribution 后面是钥匙串里生产证书的全名和组名
#security import ${initPath}/Profile/Develop_Ent/app.p12 -k ~/Library/Keychains/login.keychain -P &quot;***&quot; -T /usr/bin/codesign
#SIGNING_IDENTITY=&quot;iPhone Distribution: *********** CompanyLtd. (***********)&quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 12 Aug 2019 01:46:00 +0800</pubDate>
        <link>http://localhost:4000/2019/08/shell/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/shell/</guid>
        
        <category>Shell</category>
        
        
      </item>
    
      <item>
        <title>GPUImage3 拍照并保存</title>
        <description>&lt;hr /&gt;
&lt;h4 id=&quot;gpuimage3-拍照并保存照片&quot;&gt;GPUImage3 拍照并保存照片&lt;/h4&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;1-生成带滤镜照片&quot;&gt;&lt;strong&gt;1. 生成带滤镜照片&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;直接用当前纹理生成-renderviewcurrenttexturetexturetouiimage&quot;&gt;直接用当前纹理生成 renderView.currentTexture?.texture.toUIImage()&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/%E7%94%9F%E6%88%90%E5%B8%A6%E6%BB%A4%E9%95%9C%E5%9B%BE%E7%89%87.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-生成不带滤镜照片&quot;&gt;&lt;strong&gt;2. 生成不带滤镜照片&lt;/strong&gt;&lt;/h3&gt;
&lt;h4 id=&quot;借助代理回调的缓存&quot;&gt;借助代理回调的缓存&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/%E7%94%9F%E6%88%90%E4%B8%8D%E5%B8%A6%E6%BB%A4%E9%95%9C%E5%9B%BE%E7%89%87.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;保存图片到相册&quot;&gt;&lt;strong&gt;保存图片到相册&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87%E5%88%B0%E7%9B%B8%E5%86%8C.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Aug 2019 17:41:00 +0800</pubDate>
        <link>http://localhost:4000/2019/08/gpuimage3/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/gpuimage3/</guid>
        
        <category>Metal</category>
        
        
      </item>
    
      <item>
        <title>GPUImage3 Camera的一些注意点</title>
        <description>&lt;hr /&gt;
&lt;h4 id=&quot;第一步图片的滤镜功能学会之后开始研究镜头的拍照部分在gpuimage3-camera文件里面看到很多需要注意的点&quot;&gt;第一步图片的滤镜功能学会之后开始研究镜头的拍照部分，在GPUImage3 Camera文件里面看到很多需要注意的点。&lt;/h4&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;1-camera-的delegate没加weak然后delegate继承自class&quot;&gt;&lt;strong&gt;1. Camera 的delegate没加weak，然后delegate继承自class&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/delegate-weak.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/images/post/protocol-class.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-镜头切换功能还没写需要在两个地方修改location的set方法和imageorientation下面是实现方式&quot;&gt;&lt;strong&gt;2. 镜头切换功能还没写，需要在两个地方修改，location的set方法和imageOrientation，下面是实现方式&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/camera-location.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/images/post/imageOrientation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;使用的时候只需要&quot;&gt;&lt;strong&gt;使用的时候只需要&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/transferLens.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Aug 2019 16:40:00 +0800</pubDate>
        <link>http://localhost:4000/2019/08/gpuimage3-camera/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/gpuimage3-camera/</guid>
        
        <category>Metal</category>
        
        
      </item>
    
      <item>
        <title>GPUImage3 添加Vertex参数</title>
        <description>&lt;hr /&gt;
&lt;h4 id=&quot;前两个月看了-当一个-android-开发玩抖音玩疯了之后二-之后对这几款滤镜非常感兴趣然后又看到了雷曼同学的-在ios中使用glsl实现抖音特效越发想把这几款滤镜写到自己demo中但是我不会写opengles更不会glsl也只是刚开始学习metal&quot;&gt;前两个月看了 &lt;a href=&quot;https://www.jianshu.com/p/5bb7f2a0da90&quot;&gt;当一个 Android 开发玩抖音玩疯了之后(二)&lt;/a&gt; 之后，对这几款滤镜非常感兴趣，然后又看到了雷曼同学的 &lt;a href=&quot;https://www.jianshu.com/p/2fe27c351c91&quot;&gt;在iOS中使用GLSL实现抖音特效&lt;/a&gt;，越发想把这几款滤镜写到自己demo中，但是我不会写OpenGLES，更不会GLSL，也只是刚开始学习Metal。&lt;/h4&gt;

&lt;h4 id=&quot;我尝试搞这几个滤镜结果第一个就卡住了缩放滤镜是针对顶点着色器的结果我找gpuimage3的api发现没找到看别人的demo发现都是片元着色器这个时候的我也看不懂msl那些参数是啥意思作为图形门外汉的我只能开始了漫长的啃msl过程&quot;&gt;我尝试搞这几个滤镜，结果第一个就卡住了，，，缩放滤镜是针对顶点着色器的，结果我找GPUImage3的Api，发现没找到，，，看别人的demo发现都是片元着色器，这个时候的我也看不懂MSL那些参数是啥意思，作为图形门外汉的我只能开始了漫长的啃MSL过程。。。&lt;/h4&gt;

&lt;h4 id=&quot;看了好久然后终于知道大概语法了也发现gpuimage3的问题了它压根没提供顶点着色器的缓存对应关系没办法了只能先看懂gpuimage3怎么给片元着色器提供这个功能的然后再自己添加给编码器提供顶点着色器缓存的功能了经过一顿乱找一两天过去了我也终于看懂大概了下面是最终实现方法&quot;&gt;看了好久。。。然后终于知道大概语法了，也发现GPUImage3的问题了，，，它压根没提供顶点着色器的缓存对应关系，，，没办法了，只能先看懂GPUImage3怎么给片元着色器提供这个功能的然后再自己添加给编码器提供顶点着色器缓存的功能了。经过一顿乱找，一两天过去了，我也终于看懂大概了，下面是最终实现方法。&lt;/h4&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;下面是给gpuimage3增加的-渲染过程给编码器添加顶点着色器参数缓存功能的实现&quot;&gt;&lt;strong&gt;下面是给GPUImage3增加的 渲染过程给编码器添加顶点着色器参数缓存功能的实现:&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. BasicOperation 加属性 vertexUniformSettings&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/1-BasicOperation%E5%8A%A0%E5%B1%9E%E6%80%A7.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 在获取参数表的方法里添加vertex相关 这里可以看到 GPUImage3 片元着色器的参数是规定为struct的&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/2-%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0%E8%A1%A8%E6%96%B9%E6%B3%95.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 创建给编码器添加vertex参数缓存区的方法  position 0  texturecoord 1  新参数就默认 index=2 了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/3-%E7%BC%96%E7%A0%81%E5%99%A8%E8%AE%BE%E7%BD%AE%E7%BC%93%E5%AD%98%E5%8C%BA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4. 在编码过程方法里添加vertex 参数缓存&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/4-%E7%BC%96%E7%A0%81%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E8%AE%BE%E7%BD%AE%E7%BC%93%E5%AD%98%E5%8C%BA%E6%96%B9%E6%B3%95.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. 在滤镜链添加的过程里将vertex参数缓存区对应创建好&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/5-%E6%BB%A4%E9%95%9C%E9%93%BE%E6%B7%BB%E5%8A%A0%E8%BF%87%E7%A8%8B%E9%87%8C%E4%BC%A0%E9%80%92%E9%A1%B6%E7%82%B9%E7%BC%93%E5%AD%98%E8%A1%A8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;实现之后的使用方法&quot;&gt;&lt;strong&gt;实现之后的使用方法:&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1. 滤镜类&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/6-%E6%BB%A4%E9%95%9C%E7%B1%BB.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. 滤镜着色器&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/7-%E6%BB%A4%E9%95%9C%E7%9D%80%E8%89%B2%E5%99%A8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3. 实例化滤镜&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/images/post/8-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%BB%A4%E9%95%9C.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Aug 2019 00:45:00 +0800</pubDate>
        <link>http://localhost:4000/2019/08/gpuimage3-vertex/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/08/gpuimage3-vertex/</guid>
        
        <category>Metal</category>
        
        
      </item>
    
      <item>
        <title>第一篇博客</title>
        <description>&lt;h3 id=&quot;第一次写博客&quot;&gt;第一次写博客&lt;/h3&gt;

&lt;p&gt;　　我会在接下来的一段时间里，写一些Shell+Jenkins打包、图形着色器相关的文章。&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Jul 2019 16:30:00 +0800</pubDate>
        <link>http://localhost:4000/2019/07/first-blogger/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/07/first-blogger/</guid>
        
        <category>博客</category>
        
        
      </item>
    
  </channel>
</rss>
